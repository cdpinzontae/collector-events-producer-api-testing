@Library('jenkins-shared-lib-v2') _

def emailMessageSuccess = """================================ 
Test automation SUCCESS execution 
================================ 

# Report link: https://s3.amazonaws.com/dev.airmiles.ca/travel2.0-miles/${env.BUILD_NUMBER}/index.html 

# Jenkins execution link: https://jenkinstein.loyalty.com/job/travel2-finance-test-automation/${BUILD_NUMBER}/ 

# Jenkins build number execution: ${BUILD_NUMBER} 

# Status: SUCCESS"""

def emailMessageFailure = """================================ 
Test automation FAILURE execution 
================================ 

# Report link: https://s3.amazonaws.com/dev.airmiles.ca/travel2.0-miles/${env.BUILD_NUMBER}/index.html 

# Jenkins execution link: https://jenkinstein.loyalty.com/job/travel2-finance-test-automation/${BUILD_NUMBER}/ 

# Jenkins build number execution: ${BUILD_NUMBER} 

# Status: FAILURE"""

def emailMessageAborted = """================================ 
Test automation ABORTED execution 
================================ 

# Jenkins execution link: https://jenkinstein.loyalty.com/job/travel2-finance-test-automation/${BUILD_NUMBER}/ 

# Jenkins build number execution: ${BUILD_NUMBER} 

# Status: ABORTED"""

def mailTo = "ccuero@loyalty.com,cdiazpinzon@loyalty.com"

pipeline {
    agent {
        dockerfile {
            label 'aws-ec2'
            args '-u root:root'
        }
    }

    parameters {
        choice(name: "ENVIRONMENTS", choices: [ "uat", "load", "dev", "int"], description: "Select environment")
        string(name: "TAGS", defaultValue: "@enrollment", description: "Enter tags for Cucumber tests")
        booleanParam(defaultValue: true, name: 'DEFAULT', description: 'If you select the default option, the test cases will be executed on UAT environment and Regression tag')
    }

    environment {
        SELECTED_ENV = "${params.ENVIRONMENTS}"
        SELECTED_TAGS = "${params.TAGS}"
    }

    stages {
        stage('Prepare Parameters') {
            steps {
                script {
                    if (params.DEFAULT) {
                        env.SELECTED_ENV = "uat"
                        env.SELECTED_TAGS = "@regression"
                        echo "Default selected: overriding to env=uat and tags=@regression"
                    } else {
                        echo "Custom execution: env=${params.ENVIRONMENTS}, tags=${params.TAGS}"
                    }
                }
            }
        }

        stage('Build & Run Tests') {
            steps {
                script {
                    sh '''
                        set -e
                        echo "::::: Running Tests :::::"
                        echo "Environment: $SELECTED_ENV"
                        echo "Tags: $SELECTED_TAGS"
                        chmod +x gradlew
                        ./gradlew clean test -Dspring.profiles.active=$SELECTED_ENV -Dcucumber.filter.tags="$SELECTED_TAGS"
                    '''
                }
            }
        }

        stage('Upload Report to S3') {
            when {
                expression { fileExists('build/reports/cucumber/index.html') }
            }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'aws-creds-id',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh '''
                        echo "Uploading report to S3..."
                        aws s3 cp build/reports/cucumber/index.html s3://dev.airmiles.ca/travel2.0-miles/$BUILD_NUMBER/index.html
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Running cleanup or notification step..."
        }

        success {
            script {
                mail (
                    subject: "Test automation SUCCESS execution ${BUILD_NUMBER}",
                    body: emailMessageSuccess,
                    to: mailTo
                )
            }
        }

        failure {
            script {
                mail (
                    subject: "Test automation FAILURE execution ${BUILD_NUMBER} :(",
                    body: emailMessageFailure,
                    to: mailTo
                )
            }
        }

        aborted {
            script {
                mail (
                    subject: "Test automation ABORTED execution ${BUILD_NUMBER} :(",
                    body: emailMessageAborted,
                    to: mailTo
                )
            }
        }
    }
}
